# templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "memgraph.fullname" . }}
  labels:
    {{- include "memgraph.labels" . | nindent 4 }}
  {{- with .Values.statefulSetAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  serviceName: {{ include "memgraph.fullname" . }}
  selector:
    matchLabels:
      {{- include "memgraph.selectorLabels" . | nindent 6 }}
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        {{- include "memgraph.labels" . | nindent 8 }}
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 4 }}
      {{- end }}
    spec:
     initContainers:
      - name: init-volume-mounts
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        volumeMounts:
        {{- if $.Values.persistentVolumeClaim.storagePVC }}
        - name: {{ include "memgraph.fullname" . }}-lib-storage
          mountPath: /var/lib/memgraph
        {{- end }}
        {{- if $.Values.persistentVolumeClaim.logPVC }}
        - name: {{ include "memgraph.fullname" . }}-log-storage
          mountPath: /var/log/memgraph
        {{- end }}
        command: [ "/bin/sh","-c" ]
        args: [ "chown -R memgraph:memgraph /var/log; chown -R memgraph:memgraph /var/lib" ]
        securityContext:
          privileged: true
          readOnlyRootFilesystem: false
          capabilities:
            drop: [ "all" ]
            add: [ "CHOWN" ]
          runAsUser: 0
          runAsNonRoot: false

      terminationGracePeriodSeconds: 1800
      securityContext:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: memgraph-lib-storage
          persistentVolumeClaim:
          {{- if .Values.persistentVolumeClaim.existingClaim }}
            claimName: {{ .Values.persistentVolumeClaim.existingClaim }}
          {{- else}}
            claimName: {{ include "memgraph.fullname" . }}-lib-storage
          {{- end }}
      {{- if .Values.persistentVolumeClaim.createLogStorage }}
        - name: memgraph-log-storage
          persistentVolumeClaim:
            claimName: {{ include "memgraph.fullname" . }}-log-storage
      {{- end }}

      containers:
        - name: memgraph
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          args:
          {{- range .Values.memgraphConfig }}
          - {{ . | quote }}
          {{- end }}
          {{- if not .Values.persistentVolumeClaim.createLogStorage }}
          - "--log-file=''"
          {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: bolt
              containerPort: {{ .Values.service.port }}
            - name: websocket
              containerPort: 7444
            - name: http
              containerPort: 9091
          startupProbe:
            tcpSocket:
              port: bolt
            failureThreshold: 240
            periodSeconds: 30
          livenessProbe:
            tcpSocket:
              port: bolt
            periodSeconds: 30
            timeoutSeconds: 20
          readinessProbe:
            tcpSocket:
              port: bolt
            periodSeconds: 30
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          env:
            - name: MEMGRAPH_USER
              value: {{ .Values.memgraphUser | default "memgraph"}}
            - name: MEMGRAPH_PASSWORD
              value: {{ .Values.memgraphPassword | default "memgraph" }}
            {{ if .Values.memgraphEnterpriseLicense }}
            - name: MEMGRAPH_ENTERPRISE_LICENSE
              value: {{ .Values.memgraphEnterpriseLicense }}
            {{- end}}
            - name: MEMGRAPH_ORGANIZATION_NAME
              value: {{ .Values.memgraphOrganizationName | default "" }}
          volumeMounts:
            - name: memgraph-lib-storage
              mountPath: /var/lib/memgraph
          {{- if .Values.persistentVolumeClaim.createLogStorage }}
            - name: memgraph-log-storage
              mountPath: /var/log/memgraph
          {{- end }}
      {{- if and .Values.affinity.nodeKey .Values.affinity.nodeValue }}
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: {{ .Values.affinity.nodeKey }}
                    operator: In
                    values:
                      - {{ .Values.affinity.nodeValue }}
      {{- end }}
  volumeClaimTemplates:
  {{- if .Values.persistentVolumeClaim.createStorageClaim }}
  - metadata:
      name: {{ include "memgraph.fullname" . }}-lib-storage
    spec:
      accessModes:
      - "ReadWriteOnce"
      {{- if .Values.persistentVolumeClaim.storageClassName }}
      storageClassName: {{ .Values.persistentVolumeClaim.storageClassName }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.persistentVolumeClaim.storageSize }}
      {{- if .Values.persistentVolumeClaim.storageVolumeName }}
      volumeName: {{ .Values.persistentVolumeClaim.storageVolumeName }}
      {{- end }}
  {{- end }}
  {{- if .Values.persistentVolumeClaim.createLogStorage }}
  - metadata:
      name: {{ include "memgraph.fullname" . }}-log-storage
    spec:
      accessModes:
      - "ReadWriteOnce"
      {{- if .Values.persistentVolumeClaim.logStorageClassName }}
      storageClassName: {{ .Values.persistentVolumeClaim.logStorageClassName }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.persistentVolumeClaim.logStorageSize }}
  {{- end }}
