# templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "memgraph.fullname" . }}
  labels:
    {{- include "memgraph.labels" . | nindent 4 }}
  {{- with .Values.statefulSetAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  serviceName: {{ include "memgraph.fullname" . }}
  selector:
    matchLabels:
      {{- include "memgraph.selectorLabels" . | nindent 6 }}
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        {{- include "memgraph.labels" . | nindent 8 }}
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 4 }}
      {{- end }}

    spec:
      {{- if .Values.serviceAccount.create }}
      serviceAccount: {{ include "memgraph.serviceAccountName" . }}
      {{- else if .Values.serviceAccount.name }}
      serviceAccount: {{ .Values.serviceAccount.name | quote }}
      {{- end }}
      initContainers:
        - name: init-volume-mounts
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          volumeMounts:
          {{- if .Values.persistentVolumeClaim.createStorageClaim }}
            - name: {{ include "memgraph.fullname" . }}-lib-storage
              mountPath: /var/lib/memgraph
          {{- end }}
          {{- if .Values.persistentVolumeClaim.createLogStorage }}
            - name: {{ include "memgraph.fullname" . }}-log-storage
              mountPath: /var/log/memgraph
          {{- end }}
          {{- if .Values.persistentVolumeClaim.createUserClaim }}
            - name: {{ include "memgraph.fullname" . }}-user-storage
              mountPath: {{ .Values.persistentVolumeClaim.userMountPath }}
          {{- end }}
          {{- if .Values.persistentVolumeClaim.createCoreDumpsClaim }}
            - name: {{ include "memgraph.fullname" . }}-core-dumps-storage
              mountPath: {{ .Values.persistentVolumeClaim.coreDumpsMountPath }}
          {{- end }}
          command: ["/bin/sh", "-c"]
          # The permissions have to be explicitly adjusted because under some
          # k8s environments permissions set under
          # https://github.com/memgraph/memgraph/blob/master/release/debian/postinst
          # get overwritten. Sometimes, PVC are created using new partitions ->
          # lost+found directory should not change its permissions so it has to
          # be excluded.
          args:
            - >
              {{- if .Values.persistentVolumeClaim.createStorageClaim }}
              cd /var/lib/memgraph;
              find . -path ./lost+found -prune -o -exec chown {{ .Values.memgraphUserGroupId }} {} +;
              {{- end }}
              {{- if .Values.persistentVolumeClaim.createLogStorage }}
              cd /var/log/memgraph;
              find . -path ./lost+found -prune -o -exec chown {{ .Values.memgraphUserGroupId }} {} +;
              {{- end }}
              {{- if .Values.persistentVolumeClaim.createUserClaim }}
              cd {{ .Values.persistentVolumeClaim.userMountPath }};
              find . -path ./lost+found -prune -o -exec chown {{ .Values.memgraphUserGroupId }} {} +;
              {{- end }}
              {{- if .Values.persistentVolumeClaim.createCoreDumpsClaim }}
              cd {{ .Values.persistentVolumeClaim.coreDumpsMountPath }};
              find . -path ./lost+found -prune -o -exec chown {{ .Values.memgraphUserGroupId }} {} +;
              {{- end }}
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 0
            capabilities:
              drop: ["ALL"]
              add: ["CHOWN"]

        {{- if .Values.sysctlInitContainer.enabled }}
        - name: init-sysctl
          image: "{{ .Values.sysctlInitContainer.image.repository }}:{{ .Values.sysctlInitContainer.image.tag }}"
          imagePullPolicy: {{ .Values.sysctlInitContainer.image.pullPolicy }}
          command: ['sh', '-c', 'sysctl -w vm.max_map_count={{ .Values.sysctlInitContainer.maxMapCount }}']
          securityContext:
            privileged: true
            runAsUser: 0
        {{- end }}

        {{- if .Values.persistentVolumeClaim.createCoreDumpsClaim }}
        - name: init-core-dumps
          image: busybox
          command: ['/bin/sh', '-c']
          args:
            - >
              echo '{{ .Values.persistentVolumeClaim.coreDumpsMountPath }}/core.%e.%p.%t.%s' | tee /proc/sys/kernel/core_pattern;
              if [ -d /proc/sys/kernel/yama ]; then echo '0' | tee /proc/sys/kernel/yama/ptrace_scope; fi
          securityContext:
            privileged: true
            runAsUser: 0
        {{- end }}

      terminationGracePeriodSeconds: {{ .Values.container.terminationGracePeriodSeconds }}
      securityContext:
      {{- if .Values.useImagePullSecrets }}
      imagePullSecrets:
        {{- toYaml .Values.imagePullSecrets | nindent 4 }}
      {{- end }}
      volumes:
        - name: {{ include "memgraph.fullname" . }}-lib-storage
          persistentVolumeClaim:
          {{- if .Values.persistentVolumeClaim.createStorageClaim }}
            claimName: {{ include "memgraph.fullname" . }}-lib-storage
          {{- else }}
            claimName: {{ .Values.persistentVolumeClaim.existingClaim }}
          {{- end}}

      {{- if .Values.persistentVolumeClaim.createLogStorage }}
        - name: {{ include "memgraph.fullname" . }}-log-storage
          persistentVolumeClaim:
            claimName: {{ include "memgraph.fullname" . }}-log-storage
      {{- end }}

      {{- if .Values.persistentVolumeClaim.createUserClaim }}
        - name: {{ include "memgraph.fullname" . }}-user-storage
          persistentVolumeClaim:
            claimName: {{ include "memgraph.fullname" . }}-user-storage
      {{- end }}
      {{- if .Values.persistentVolumeClaim.createCoreDumpsClaim }}
        - name: {{ include "memgraph.fullname" . }}-core-dumps-storage
          persistentVolumeClaim:
            claimName: {{ include "memgraph.fullname" . }}-core-dumps-storage
      {{- end }}
      {{- range .Values.customQueryModules }}
        - name: {{ .volume | quote }}
          configMap:
            name: {{ .volume | quote }}
      {{- end }}


      containers:
        - name: memgraph
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          args:
          {{- range .Values.memgraphConfig }}
          - {{ . | quote }}
          {{- end }}
          {{- if not .Values.persistentVolumeClaim.createLogStorage }}
          - "--log-file="
          {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: bolt
              containerPort: {{ .Values.service.boltPort }}
            - name: websocket
              containerPort: {{ .Values.service.websocketPortMonitoring }}
            - name: http
              containerPort: {{ .Values.service.httpPortMonitoring }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: [ "ALL" ]
          # Run by 'memgraph' user as specified in the Dockerfile
          {{- include "container.readinessProbe" .Values.container.readinessProbe | nindent 10 }}
          {{- include "container.livenessProbe" .Values.container.livenessProbe | nindent 10 }}
          {{- include "container.startupProbe" .Values.container.startupProbe | nindent 10 }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          env:
            {{- if .Values.secrets.enabled }}
            - name: MEMGRAPH_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.name }}
                  key: {{ .Values.secrets.userKey }}
            - name: MEMGRAPH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.name }}
                  key: {{ .Values.secrets.passwordKey }}
           {{- end }}
           {{ if .Values.memgraphEnterpriseLicense }}
            - name: MEMGRAPH_ENTERPRISE_LICENSE
              value: {{ .Values.memgraphEnterpriseLicense }}
            - name: MEMGRAPH_ORGANIZATION_NAME
              value: {{ .Values.memgraphOrganizationName}}
          {{- end}}
          volumeMounts:
            - name: {{ include "memgraph.fullname" . }}-lib-storage
              mountPath: /var/lib/memgraph
          {{- if .Values.persistentVolumeClaim.createLogStorage }}
            - name: {{ include "memgraph.fullname" . }}-log-storage
              mountPath: /var/log/memgraph
          {{- end }}
          {{- if .Values.persistentVolumeClaim.createCoreDumpsClaim }}
            - name: {{ include "memgraph.fullname" . }}-core-dumps-storage
              mountPath: {{ .Values.persistentVolumeClaim.coreDumpsMountPath }}
          {{- end }}
          {{- if .Values.persistentVolumeClaim.createUserClaim }}
            - name: {{ include "memgraph.fullname" . }}-user-storage
              mountPath: {{ .Values.persistentVolumeClaim.userMountPath }}
          {{- end }}
          {{- range .Values.customQueryModules }}
            - name: {{ .volume | quote }}
              mountPath: {{ printf "/var/lib/memgraph/internal_modules/%s" .file }}
              subPath: {{ .file | quote }}
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if and .Values.affinity.nodeKey .Values.affinity.nodeValue }}
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: {{ .Values.affinity.nodeKey }}
                    operator: In
                    values:
                      - {{ .Values.affinity.nodeValue }}
      {{- end }}
  volumeClaimTemplates:
  {{- if .Values.persistentVolumeClaim.createStorageClaim }}
    - metadata:
        name: {{ include "memgraph.fullname" . }}-lib-storage
      spec:
        accessModes:
        - "ReadWriteOnce"
        {{- if .Values.persistentVolumeClaim.storageClassName }}
        storageClassName: {{ .Values.persistentVolumeClaim.storageClassName }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistentVolumeClaim.storageSize }}
        {{- if .Values.persistentVolumeClaim.storageVolumeName }}
        volumeName: {{ .Values.persistentVolumeClaim.storageVolumeName }}
        {{- end }}
  {{- end }}

  {{- if .Values.persistentVolumeClaim.createLogStorage }}
    - metadata:
        name: {{ include "memgraph.fullname" . }}-log-storage
      spec:
        accessModes:
        - "ReadWriteOnce"
        {{- if .Values.persistentVolumeClaim.logStorageClassName }}
        storageClassName: {{ .Values.persistentVolumeClaim.logStorageClassName }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistentVolumeClaim.logStorageSize }}
  {{- end }}

  {{- if .Values.persistentVolumeClaim.createCoreDumpsClaim }}
    - metadata:
        name: {{ include "memgraph.fullname" . }}-core-dumps-storage
      spec:
        accessModes:
        - "ReadWriteOnce"
        {{- if .Values.persistentVolumeClaim.coreDumpsStorageClassName }}
        storageClassName: {{ .Values.persistentVolumeClaim.coreDumpsStorageClassName }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistentVolumeClaim.coreDumpsStorageSize }}
  {{- end }}

  {{- if .Values.persistentVolumeClaim.createUserClaim }}
    - metadata:
        name: {{ include "memgraph.fullname" . }}-user-storage
      spec:
        accessModes:
        - {{ .Values.persistentVolumeClaim.userStorageAccessMode }}
        {{- if .Values.persistentVolumeClaim.userStorageClassName }}
        storageClassName: {{ .Values.persistentVolumeClaim.userStorageClassName }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistentVolumeClaim.userStorageSize }}
  {{- end }}
