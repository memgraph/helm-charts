{{- range $index, $data := .Values.data }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: memgraph-data-{{ $data.id }}
spec:
  serviceName: "memgraph-data-{{ $data.id }}"
  replicas: 1
  selector:
    matchLabels:
      app: memgraph-data-{{ $data.id }}
  template:
    metadata:
      labels:
        app: memgraph-data-{{ $data.id }}
    spec:
      initContainers:
      - name: init
        image: "{{ $.Values.memgraph.image.repository }}:{{ $.Values.memgraph.image.tag }}"
        volumeMounts:
        {{- if $.Values.memgraph.data.volumeClaim.storagePVC }}
        - name: memgraph-data-{{ $data.id }}-lib-storage
          mountPath: /var/lib/memgraph
        {{- end }}
        {{- if $.Values.memgraph.data.volumeClaim.logPVC }}
        - name: memgraph-data-{{ $data.id }}-log-storage
          mountPath: /var/log/memgraph
        {{- end }}
        command: [ "/bin/sh","-c" ]
        args: [ "chown -R memgraph:memgraph /var/log; chown -R memgraph:memgraph /var/lib" ]
        securityContext:
          privileged: true
          readOnlyRootFilesystem: false
          capabilities:
            drop: [ "all" ]
            add: [ "CHOWN" ]
          runAsUser: 0
          runAsNonRoot: false
      containers:
      - name: memgraph-data
        image: "{{ $.Values.memgraph.image.repository }}:{{ $.Values.memgraph.image.tag }}"
        imagePullPolicy: {{ $.Values.memgraph.image.pullPolicy }}
        ports:
        - containerPort: {{ $data.boltPort }}
        - containerPort: {{ $data.managementPort }}
        - containerPort: {{ $data.replicationPort }}
        args:
        {{- range $arg := $data.args }}
        - "{{ $arg }}"
        {{- end }}
        env:
        - name: MEMGRAPH_ENTERPRISE_LICENSE
          value: "{{ $.Values.memgraph.env.MEMGRAPH_ENTERPRISE_LICENSE }}"
        - name: MEMGRAPH_ORGANIZATION_NAME
          value: "{{ $.Values.memgraph.env.MEMGRAPH_ORGANIZATION_NAME }}"
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - echo 'RETURN 0;' | mgconsole --host localhost --port {{ $data.boltPort }}
          initialDelaySeconds: {{ $.Values.memgraph.probes.liveness.initialDelaySeconds }}
          periodSeconds: {{ $.Values.memgraph.probes.liveness.periodSeconds }}
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - echo 'RETURN 0;' | mgconsole --host localhost --port {{ $data.boltPort }}
          initialDelaySeconds: {{ $.Values.memgraph.probes.readiness.initialDelaySeconds }}
          periodSeconds: {{ $.Values.memgraph.probes.readiness.periodSeconds }}
        startupProbe:
          exec:
            command:
            - sh
            - -c
            - echo 'RETURN 0;' | mgconsole --host localhost --port {{ $data.boltPort }}
          failureThreshold: {{ $.Values.memgraph.probes.startup.failureThreshold }}
          periodSeconds: {{ $.Values.memgraph.probes.startup.periodSeconds }}
        volumeMounts:
        {{- if $.Values.memgraph.data.volumeClaim.storagePVC }}
          - name: memgraph-data-{{ $data.id }}-lib-storage
            mountPath: /var/lib/memgraph
        {{- end }}
        {{- if $.Values.memgraph.data.volumeClaim.logPVC}}
          - name: memgraph-data-{{ $data.id }}-log-storage
            mountPath: /var/log/memgraph
        {{- end }}
  volumeClaimTemplates:
    {{- if $.Values.memgraph.data.volumeClaim.storagePVC }}
    - metadata:
        name: memgraph-data-{{ $data.id }}-lib-storage
      spec:
        accessModes:
        - "ReadWriteOnce"
        {{- if $.Values.memgraph.data.volumeClaim.storagePVCClassName }}
        storageClassName: {{ $.Values.memgraph.data.volumeClaim.storagePVCClassName }}
        {{- end }}
        resources:
          requests:
            storage: {{ $.Values.memgraph.data.volumeClaim.storagePVCSize }}
    {{- end }}
    {{- if $.Values.memgraph.data.volumeClaim.logPVC }}
    - metadata:
        name: memgraph-data-{{ $data.id }}-log-storage
      spec:
        accessModes:
        - "ReadWriteOnce"
        {{- if $.Values.memgraph.data.volumeClaim.logPVCClassName }}
        storageClassName: {{ $.Values.memgraph.data.volumeClaim.logPVCClassName }}
        {{- end }}
        resources:
          requests:
            storage: {{ $.Values.memgraph.data.volumeClaim.logPVCSize }}
    {{- end }}

---
{{- end }}
