{{- range $index, $coordinator := .Values.coordinators }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: memgraph-coordinator-{{ $coordinator.id }}
spec:
  serviceName: "memgraph-coordinator-{{ $coordinator.id }}"
  replicas: 1
  selector:
    matchLabels:
      app: memgraph-coordinator-{{ $coordinator.id }}
      role: coordinator
  template:
    metadata:
      labels:
        app: memgraph-coordinator-{{ $coordinator.id }}
        role: coordinator
    spec:
      affinity:
        {{- if $.Values.affinity.nodeSelection }}
        # Node Selection Affinity: Scheduled on nodes with specific label key and value
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: {{ $.Values.affinity.roleLabelKey }}
                operator: In
                values:
                - {{ $.Values.affinity.coordinatorNodeLabelValue }}
        podAntiAffinity :
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: role
                operator: In
                values:
                - coordinator
            topologyKey: "kubernetes.io/hostname"
        {{- else if $.Values.affinity.unique }}
        # Unique Affinity: Schedule pods on different nodes
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: role
                operator: In
                values:
                - coordinator
                - data
            topologyKey: "kubernetes.io/hostname"
        {{- else if $.Values.affinity.parity }}
        # Parity Affinity: One coordinator and one data node per node, coordinator schedules first, needs to be in pairs
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: role
                operator: In
                values:
                - coordinator
            topologyKey: "kubernetes.io/hostname"
        {{- else }}
        # Default Affinity: Avoid scheduling on the same node
        podAntiAffinity:
           preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 50
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: role
                      operator: In
                      values:
                        - coordinator
                topologyKey: "kubernetes.io/hostname"
        {{- end }}
      initContainers:
      - name: init
        image: "{{ $.Values.image.repository }}:{{ $.Values.image.tag }}"
        volumeMounts:
        - name: memgraph-coordinator-{{ $coordinator.id }}-lib-storage
          mountPath: /var/lib/memgraph
        - name: memgraph-coordinator-{{ $coordinator.id }}-log-storage
          mountPath: /var/log/memgraph
        command: [ "/bin/sh","-c" ]
        args: [ "chown -R memgraph:memgraph /var/log; chown -R memgraph:memgraph /var/lib" ]
        securityContext:
          privileged: true
          readOnlyRootFilesystem: false
          capabilities:
            drop: [ "all" ]
            add: [ "CHOWN" ]
          runAsUser: 0
          runAsNonRoot: false
    {{- if $.Values.sysctlInitContainer.enabled }}
      - name: init-sysctl
        image: busybox
        command: ['sh', '-c', 'sysctl -w vm.max_map_count={{ $.Values.sysctlInitContainer.maxMapCount }}']
        securityContext:
          privileged: true
          runAsUser: 0
        {{- end }}

      containers:
      - name: memgraph-coordinator
        image: "{{ $.Values.image.repository }}:{{ $.Values.image.tag }}"
        imagePullPolicy: {{ $.Values.image.pullPolicy }}
        ports:
        - containerPort: {{ $.Values.ports.boltPort }}
        - containerPort: {{ $.Values.ports.managementPort }}
        - containerPort: {{ $.Values.ports.coordinatorPort }}
        args:
        {{- range $arg := $coordinator.args }}
        - "{{ $arg }}"
        {{- end }}
        env:
          {{- if $.Values.secrets.enabled }}
          - name: MEMGRAPH_USER
            valueFrom:
              secretKeyRef:
                name: {{ $.Values.secrets.name }}
                key: {{ $.Values.secrets.userKey }}
          - name: MEMGRAPH_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ $.Values.secrets.name }}
                key: {{ $.Values.secrets.passwordKey }}
          {{- end }}
          - name: MEMGRAPH_ENTERPRISE_LICENSE
            value: {{ $.Values.env.MEMGRAPH_ENTERPRISE_LICENSE }}
          - name: MEMGRAPH_ORGANIZATION_NAME
            value: {{ $.Values.env.MEMGRAPH_ORGANIZATION_NAME }}
        volumeMounts:
          - name: memgraph-coordinator-{{ $coordinator.id }}-lib-storage
            mountPath: /var/lib/memgraph
          - name: memgraph-coordinator-{{ $coordinator.id }}-log-storage
            mountPath: /var/log/memgraph
  volumeClaimTemplates:
    - metadata:
        name: memgraph-coordinator-{{ $coordinator.id }}-lib-storage
      spec:
        accessModes:
        - {{ $.Values.storage.libStorageAccessMode}}
        {{- if $.Values.storage.libStorageClassName }}
        storageClassName: {{ $.Values.storage.libStorageClassName }}
        {{- end }}
        resources:
          requests:
            storage: {{ $.Values.storage.libPVCSize }}

    - metadata:
        name: memgraph-coordinator-{{ $coordinator.id }}-log-storage
      spec:
        accessModes:
        - {{ $.Values.storage.logStorageAccessMode}}
        {{- if $.Values.storage.logStorageClassName }}
        storageClassName: {{ $.Values.storage.logStorageClassName }}
        {{- end }}
        resources:
          requests:
            storage: {{ $.Values.storage.logPVCSize }}
---
{{- end }}
